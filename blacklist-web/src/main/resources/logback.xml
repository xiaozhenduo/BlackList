<?xml version="1.0" encoding="UTF-8"?>
<!--日志生成目录调试时可开启debug，如查找日志输出根目录、日志相关配置等。-->
<configuration scan="true" scanPeriod="60 seconds" debug="true">

    <contextName>Logback For hqjygl_dueval</contextName>

    <!-- 设置log日志存放地址 -->

    <!--（改） 单环境设置 -->
    <property name="LOG_HOME" value="${user.dir}/blacklist-log"/><!--user.dir实际输出的是应用根目录，若是jar运行，则是jar所在目录；若是war运行,则是应用容器下相关目录。-->

    <!-- 多环境设置 （如果你需要设置区分 开发环境，测试环境，生产环境...）-->
    <!-- 如果需要设置多环境的配置，只设置以下注释内容是不够的，还需要给每个环境设置对应的配置文件如（application-dev.properties）-->
   <!-- <springProfile name="test">
        <property name="LOG_HOME" value="${user.dir}/blacklist-system/src/main/java/Blacklist-log-test"/>
    </springProfile>
    <springProfile name="pro">
        <property name="LOG_HOME" value="${user.dir}/blacklist-system/src/main/java/Blacklist-log-pro"/>
    </springProfile>-->

    <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类(实际未生效) -->
    <!--<conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>-->
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="%red(%d{yyyy-MM-dd HH:mm:ss.SSS}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{80}) - %cyan(%msg%n)"/>
    <property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{25} -%msg%n"/>

    <!-- ++++++++++++++++++++++++++++++++++++++++++++++Log Level Confluence Start++++++++++++++++++++++++++++++++++++++++++++++  -->

    <!-- 控制台输出 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!-- encoder默认配置为PartternLayoutEncoder -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{80} -%msg%n</pattern>-->
            <!--启用彩色控制台日志-->
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <!--必须配置charset以支持console的中文输出-->
            <charset>utf8</charset>
        </encoder>
        <target>System.out</target>
    </appender>

    <!-- 按照每天生成日志文件 -->
    <appender name="ROLLING_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名 ,每天保存（侧翻）一次 -->
            <FileNamePattern>${LOG_HOME}/%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--日志文件保留天数 -->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <!--日志文件最大的大小 -->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>20MB</MaxFileSize>
        </triggeringPolicy>
    </appender>

    <!-- ++++++++++++++++++++++++++++++++++++++++++++++Log Level Confluence End++++++++++++++++++++++++++++++++++++++++++++++  -->


    <!-- ++++++++++++++++++++++++++++++++++++++++++++++Log Level Classification Start++++++++++++++++++++++++++++++++++++++++++++++  -->

    <!--info 级别的日志 按照每天生成日志文件 -->
    <appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <fileNamePattern>${LOG_HOME}/info/%d{yyyy-MM-dd}.log</fileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <!--日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>20MB</MaxFileSize>
        </triggeringPolicy>
    </appender>


    <!--WARN 级别的日志 按照每天生成日志文件-->
    <appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/warn/%d{yyyy-MM-dd}.log</fileNamePattern>
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <!--日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>20MB</MaxFileSize>
        </triggeringPolicy>
    </appender>

    <!--ERROR 级别的日志 按照每天生成日志文件-->
    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/error/%d{yyyy-MM-dd}.log</fileNamePattern>
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
    </appender>
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++Log Level Classification End++++++++++++++++++++++++++++++++++++++++++++++  -->

    <!-- （改）过滤器，可以指定哪些包，哪个记录到等级， -->
    <!-- 运用的场景比如，你只需要com.demo.controller包下的error日志输出。定义好name="com.demo.controller" level="ERROR" 就行了 -->
    <!--
        <logger name="com.demo.controller" level="ERROR">
            <appender-ref ref="ROLLING_FILE"/>
        </logger>
    -->

    <!--
        additivity的作用在于 children-logger是否使用 rootLogger配置的appender进行输出。
        false：表示只用当前logger的appender-ref。 true：表示当前logger的appender-ref和rootLogger的appender-ref都有效。
    -->
    <!--<logger name="com.bootdo" additivity="false">-->
    <!--若与root的logger配置一样可以不用启用额外的logger-->
    <!--<logger name="com.bootdo" level="INFO">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ROLLING_FILE"/>
    </logger>-->

    <!-- 方式一：全局，遇到INFO及以上级别就进行输出 -->
    <!--<root level="INFO">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ROLLING_FILE"/>
    </root>-->

    <!-- 方式二：全局（彩显且分级），遇到INFO及以上级别就进行输出 -->
    <root level="INFO">
        <appender-ref ref="ROLLING_FILE"/><!--汇总层-->
        <appender-ref ref="CONSOLE" /><!--控制台-->
        <appender-ref ref="INFO"/><!--INFO分级-->
        <appender-ref ref="WARN"/><!--WARN分级-->
        <appender-ref ref="ERROR"/><!--ERROR分级-->
    </root>

</configuration>
